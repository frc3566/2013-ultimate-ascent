// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3566.OfficialCode;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc3566.OfficialCode.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton launch;
    public JoystickButton screwU;
    public JoystickButton hockOP;
    public Joystick joystick1;
    public JoystickButton screwD;
    public JoystickButton joystickButton1;
    public Joystick joystick2;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        joystick2 = new Joystick(2);
        
        joystickButton1 = new JoystickButton(joystick2, 1);
        joystickButton1.whenPressed(new LoadFrisbee());
        screwD = new JoystickButton(joystick2, 2);
        screwD.whileHeld(new ScrewDown());
        joystick1 = new Joystick(1);
        
        hockOP = new JoystickButton(joystick1, 1);
        hockOP.whenPressed(new openHock());
        screwU = new JoystickButton(joystick1, 2);
        screwU.whileHeld(new ScrewUp());
        launch = new JoystickButton(joystick1, 1);
        launch.whenPressed(new HockCloseOpen());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("RunTank", new RunTank());
        SmartDashboard.putData("RunArcade", new RunArcade());
        SmartDashboard.putData("closeHock", new closeHock());
        SmartDashboard.putData("openHock", new openHock());
        SmartDashboard.putData("HockCloseOpen", new HockCloseOpen());
        SmartDashboard.putData("runWheel", new runWheel());
        SmartDashboard.putData("stopWheel", new stopWheel());
        SmartDashboard.putData("DeckWheelOn", new DeckWheelOn());
        SmartDashboard.putData("ScrewUp", new ScrewUp());
        SmartDashboard.putData("ScrewDown", new ScrewDown());
        SmartDashboard.putData("LoadFrisbee", new LoadFrisbee());
        SmartDashboard.putData("AdjustX", new AdjustX());
        SmartDashboard.putData("AdjustY", new AdjustY());
        SmartDashboard.putData("Wait5s", new Wait5s());
        SmartDashboard.putData("AngleDown", new AngleDown());
        SmartDashboard.putData("FullShoot", new FullShoot());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }
    public Joystick getJoystick2() {
        return joystick2;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
